var search_data = {"index":{"searchIndex":["object","silicium","combinatorics","dice","polyhedron","polyhedronset","error","geometry","line2dcanon","variablesorderexception","graphs","grapherror","orientedgraph","unorientedgraph","integraldoesntexisterror","numericalintegration","optimization","plotter","image","accuracy()","add_edge!()","add_edge!()","add_to_queue()","add_vertex!()","adjacted_with()","arrangement()","bar_chart()","bogosort()","bogosort!()","breadth_first_search?()","clockwise()","color()","combination()","connected?()","counter_clockwise()","csides()","cut_by_eq()","delete_edge!()","delete_edge!()","delete_vertex!()","dfu()","dijkstra_algorythm()","directing_vector3d()","distance_point_line2d()","distance_point_line_equation2d()","distance_point_to_point2d()","distance_point_to_point3d()","edge_label_number()","edge_number()","export()","fact()","factorial()","get_edge_label()","get_vertex_label()","half_division()","half_division_step()","has_edge?()","has_vertex?()","height_point_3d()","hook_jeeves()","hook_jeeves_step()","insert_eq()","integrating_monte_carlo_base()","label_edge!()","label_edge!()","label_vertex!()","left_rect_integration()","left_rect_integration_n()","make_graph_by_plotter()","middle()","middle_rectangles()","middle_rectangles_with_a_segment()","minimal_convex_hull_2d()","needed_variables_order?()","new()","new()","new()","new()","new()","not_polygon?()","number_of_connected()","oriented_area()","percentage()","point_is_on_line?()","point_to_line_distance_3d()","process_cf()","process_free_member()","process_line_by_coordinates()","protected_add_edge!()","protected_delete_edge!()","put_point_in_part()","re_lu()","rectangle()","reverse!()","sides()","sigmoid()","simpson_integration()","simpson_integration_with_a_segment()","sorted?()","switch_step()","three_eights_integration()","three_eights_integration_n()","throw()","throw()","to_s()","to_s()","trapezoid()","trapezoid_with_a_segment()","vector_length()","vectors_product()","vertex_label_number()","vertex_number()","vertices()","readme"],"longSearchIndex":["object","silicium","silicium::combinatorics","silicium::dice","silicium::dice::polyhedron","silicium::dice::polyhedronset","silicium::error","silicium::geometry","silicium::geometry::line2dcanon","silicium::geometry::variablesorderexception","silicium::graphs","silicium::graphs::grapherror","silicium::graphs::orientedgraph","silicium::graphs::unorientedgraph","silicium::integraldoesntexisterror","silicium::numericalintegration","silicium::optimization","silicium::plotter","silicium::plotter::image","silicium::optimization#accuracy()","silicium::graphs::orientedgraph#add_edge!()","silicium::graphs::unorientedgraph#add_edge!()","silicium::graphs#add_to_queue()","silicium::graphs::orientedgraph#add_vertex!()","silicium::graphs::orientedgraph#adjacted_with()","silicium::combinatorics#arrangement()","silicium::plotter::image#bar_chart()","silicium::optimization#bogosort()","silicium::optimization#bogosort!()","silicium::graphs#breadth_first_search?()","silicium::geometry#clockwise()","silicium::plotter#color()","silicium::combinatorics#combination()","silicium::graphs#connected?()","silicium::geometry#counter_clockwise()","silicium::dice::polyhedron#csides()","silicium::geometry#cut_by_eq()","silicium::graphs::orientedgraph#delete_edge!()","silicium::graphs::unorientedgraph#delete_edge!()","silicium::graphs::orientedgraph#delete_vertex!()","silicium::graphs#dfu()","silicium::graphs#dijkstra_algorythm()","silicium::geometry#directing_vector3d()","silicium::geometry#distance_point_line2d()","silicium::geometry#distance_point_line_equation2d()","silicium::geometry#distance_point_to_point2d()","silicium::geometry#distance_point_to_point3d()","silicium::graphs::orientedgraph#edge_label_number()","silicium::graphs::orientedgraph#edge_number()","silicium::plotter::image#export()","silicium::combinatorics#fact()","silicium::combinatorics#factorial()","silicium::graphs::orientedgraph#get_edge_label()","silicium::graphs::orientedgraph#get_vertex_label()","silicium::optimization#half_division()","silicium::optimization#half_division_step()","silicium::graphs::orientedgraph#has_edge?()","silicium::graphs::orientedgraph#has_vertex?()","silicium::geometry#height_point_3d()","silicium::optimization#hook_jeeves()","silicium::optimization#hook_jeeves_step()","silicium::geometry#insert_eq()","silicium::optimization#integrating_monte_carlo_base()","silicium::graphs::orientedgraph#label_edge!()","silicium::graphs::unorientedgraph#label_edge!()","silicium::graphs::orientedgraph#label_vertex!()","silicium::numericalintegration::left_rect_integration()","silicium::numericalintegration::left_rect_integration_n()","silicium::dice::polyhedronset#make_graph_by_plotter()","silicium::optimization#middle()","silicium::numericalintegration::middle_rectangles()","silicium::numericalintegration::middle_rectangles_with_a_segment()","silicium::geometry#minimal_convex_hull_2d()","silicium::geometry#needed_variables_order?()","silicium::dice::polyhedron::new()","silicium::dice::polyhedronset::new()","silicium::geometry::line2dcanon::new()","silicium::graphs::orientedgraph::new()","silicium::plotter::image::new()","silicium::geometry#not_polygon?()","silicium::graphs#number_of_connected()","silicium::geometry#oriented_area()","silicium::dice::polyhedronset#percentage()","silicium::geometry::line2dcanon#point_is_on_line?()","silicium::geometry#point_to_line_distance_3d()","silicium::geometry#process_cf()","silicium::geometry#process_free_member()","silicium::geometry#process_line_by_coordinates()","silicium::graphs::orientedgraph#protected_add_edge!()","silicium::graphs::orientedgraph#protected_delete_edge!()","silicium::geometry#put_point_in_part()","silicium::optimization#re_lu()","silicium::plotter::image#rectangle()","silicium::graphs::orientedgraph#reverse!()","silicium::dice::polyhedron#sides()","silicium::optimization#sigmoid()","silicium::numericalintegration::simpson_integration()","silicium::numericalintegration::simpson_integration_with_a_segment()","silicium::optimization#sorted?()","silicium::optimization#switch_step()","silicium::numericalintegration::three_eights_integration()","silicium::numericalintegration::three_eights_integration_n()","silicium::dice::polyhedron#throw()","silicium::dice::polyhedronset#throw()","silicium::dice::polyhedron#to_s()","silicium::dice::polyhedronset#to_s()","silicium::numericalintegration::trapezoid()","silicium::numericalintegration::trapezoid_with_a_segment()","silicium::geometry#vector_length()","silicium::geometry#vectors_product()","silicium::graphs::orientedgraph#vertex_label_number()","silicium::graphs::orientedgraph#vertex_number()","silicium::graphs::orientedgraph#vertices()",""],"info":[["Object","","Object.html","",""],["Silicium","","Silicium.html","","<p>require &#39;set&#39; require &#39;silicium&#39;\n"],["Silicium::Combinatorics","","Silicium/Combinatorics.html","",""],["Silicium::Dice","","Silicium/Dice.html","",""],["Silicium::Dice::Polyhedron","","Silicium/Dice/Polyhedron.html","","<p>Class represents a polyhedron csides - number or sides sides - array of sides(unusual for custom polyhedrons) …\n"],["Silicium::Dice::PolyhedronSet","","Silicium/Dice/PolyhedronSet.html","","<p>Class represents a PolyhedronsSet percentage - hash with chances of getting definite score\n"],["Silicium::Error","","Silicium/Error.html","",""],["Silicium::Geometry","","Silicium/Geometry.html","",""],["Silicium::Geometry::Line2dCanon","","Silicium/Geometry/Line2dCanon.html","","<p>Class represents a line as equation y = k*x +b k - slope b - free_term in two-dimensional space\n"],["Silicium::Geometry::VariablesOrderException","","Silicium/Geometry/VariablesOrderException.html","",""],["Silicium::Graphs","","Silicium/Graphs.html","",""],["Silicium::Graphs::GraphError","","Silicium/Graphs/GraphError.html","",""],["Silicium::Graphs::OrientedGraph","","Silicium/Graphs/OrientedGraph.html","",""],["Silicium::Graphs::UnorientedGraph","","Silicium/Graphs/UnorientedGraph.html","",""],["Silicium::IntegralDoesntExistError","","Silicium/IntegralDoesntExistError.html","",""],["Silicium::NumericalIntegration","","Silicium/NumericalIntegration.html","","<p>A class providing numerical integration methods\n"],["Silicium::Optimization","","Silicium/Optimization.html","",""],["Silicium::Plotter","","Silicium/Plotter.html","",""],["Silicium::Plotter::Image","","Silicium/Plotter/Image.html","","<p>A class representing canvas for plotting bar charts and function graphs\n"],["accuracy","Silicium::Optimization","Silicium/Optimization.html#method-i-accuracy","(step)","<p>calculate current accuracy in Hook - Jeeves method\n"],["add_edge!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-add_edge-21","(from, to)",""],["add_edge!","Silicium::Graphs::UnorientedGraph","Silicium/Graphs/UnorientedGraph.html#method-i-add_edge-21","(from, to)",""],["add_to_queue","Silicium::Graphs","Silicium/Graphs.html#method-i-add_to_queue","(graph, queue, node, visited)",""],["add_vertex!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-add_vertex-21","(vertex_id)",""],["adjacted_with","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-adjacted_with","(vertex)",""],["arrangement","Silicium::Combinatorics","Silicium/Combinatorics.html#method-i-arrangement","(n, k)","<p>Function A(n,k)\n"],["bar_chart","Silicium::Plotter::Image","Silicium/Plotter/Image.html#method-i-bar_chart","(bars, bar_width, bars_color = ChunkyPNG::Color('red @ 1.0'), axis_color = ChunkyPNG::Color::BLACK)","<p>Draws a bar chart in the plot using provided <code>bars</code>, each of them has width of <code>bar_width</code> and colored <code>bars_color</code> …\n"],["bogosort","Silicium::Optimization","Silicium/Optimization.html#method-i-bogosort","(a)","<p>fastest(but it is not exactly) sort\n"],["bogosort!","Silicium::Optimization","Silicium/Optimization.html#method-i-bogosort-21","(a)","<p>fastest(but it is not exactly) sort, modify sequance\n"],["breadth_first_search?","Silicium::Graphs","Silicium/Graphs.html#method-i-breadth_first_search-3F","(graph, start, goal)",""],["clockwise","Silicium::Geometry","Silicium/Geometry.html#method-i-clockwise","(a, b, c)","<p>Determines if a clockwise crawl is performed for defined order of points\n"],["color","Silicium::Plotter","Silicium/Plotter.html#method-i-color","(*args)","<p>Factory method to return a color value, based on the arguments given.\n<p>@overload Color(r, g, b, a)\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@param</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["combination","Silicium::Combinatorics","Silicium/Combinatorics.html#method-i-combination","(n, k)","<p>Function C(n,k)\n"],["connected?","Silicium::Graphs","Silicium/Graphs.html#method-i-connected-3F","(graph)",""],["counter_clockwise","Silicium::Geometry","Silicium/Geometry.html#method-i-counter_clockwise","(a, b, c)","<p>Determines if a counter-clockwise crawl is performed for defined order of points\n"],["csides","Silicium::Dice::Polyhedron","Silicium/Dice/Polyhedron.html#method-i-csides","()",""],["cut_by_eq","Silicium::Geometry","Silicium/Geometry.html#method-i-cut_by_eq","(line_equation)",""],["delete_edge!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-delete_edge-21","(from, to)",""],["delete_edge!","Silicium::Graphs::UnorientedGraph","Silicium/Graphs/UnorientedGraph.html#method-i-delete_edge-21","(from, to)",""],["delete_vertex!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-delete_vertex-21","(vertex)",""],["dfu","Silicium::Graphs","Silicium/Graphs.html#method-i-dfu","(graph, vertice, visited)",""],["dijkstra_algorythm","Silicium::Graphs","Silicium/Graphs.html#method-i-dijkstra_algorythm","(graph, starting_vertex)",""],["directing_vector3d","Silicium::Geometry","Silicium/Geometry.html#method-i-directing_vector3d","(line_equation)","<p>Creates an array- directing vector in three-dimensional space . The equation is specified in the canonical …\n"],["distance_point_line2d","Silicium::Geometry","Silicium/Geometry.html#method-i-distance_point_line2d","(p1, p2, a)","<p>The distance from a point to a line on a plane The line is defined by two points en.wikipedia.org/wiki/Distance_from_a_point_to_a_line …\n"],["distance_point_line_equation2d","Silicium::Geometry","Silicium/Geometry.html#method-i-distance_point_line_equation2d","(a, b, c, p)","<p>The distance from a point to a line on a plane Line defined by an equation return 0 if the equation does …\n"],["distance_point_to_point2d","Silicium::Geometry","Silicium/Geometry.html#method-i-distance_point_to_point2d","(a, b)","<p>Calculates the distance from given points in two-dimensional space\n"],["distance_point_to_point3d","Silicium::Geometry","Silicium/Geometry.html#method-i-distance_point_to_point3d","(a, b)","<p>Calculates the distance from given points in three-dimensional space\n"],["edge_label_number","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-edge_label_number","()",""],["edge_number","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-edge_number","()",""],["export","Silicium::Plotter::Image","Silicium/Plotter/Image.html#method-i-export","(filename)","<p>Exports plotted image to file <code>filename</code>\n"],["fact","Silicium::Combinatorics","Silicium/Combinatorics.html#method-i-fact","(n, k)","<p>Factorial for counting 3 parameters in one run\n"],["factorial","Silicium::Combinatorics","Silicium/Combinatorics.html#method-i-factorial","(n)",""],["get_edge_label","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-get_edge_label","(from, to)",""],["get_vertex_label","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-get_vertex_label","(vertex)",""],["half_division","Silicium::Optimization","Silicium/Optimization.html#method-i-half_division","(a, b, eps = 0.001, &block)","<p>find root in [a, b], if he exist, if number of iterations &gt; iters -&gt; error\n"],["half_division_step","Silicium::Optimization","Silicium/Optimization.html#method-i-half_division_step","(a, b, c, &block)","<p>do one half division step\n"],["has_edge?","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-has_edge-3F","(from, to)",""],["has_vertex?","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-has_vertex-3F","(vertex)",""],["height_point_3d","Silicium::Geometry","Silicium/Geometry.html#method-i-height_point_3d","(line_equation)","<p>Creates an array of coordinates of the point ([x, y, z] on the line given by the equation in the canonical …\n"],["hook_jeeves","Silicium::Optimization","Silicium/Optimization.html#method-i-hook_jeeves","(x, step, eps = 0.1, &block)","<p>Hook - Jeeves method for find minimum point (x - array of start variables, step - step of one iteration, …\n"],["hook_jeeves_step","Silicium::Optimization","Silicium/Optimization.html#method-i-hook_jeeves_step","(x, i, step, &block)","<p>do one Hook - Jeeves step\n"],["insert_eq","Silicium::Geometry","Silicium/Geometry.html#method-i-insert_eq","(line_equation)",""],["integrating_Monte_Carlo_base","Silicium::Optimization","Silicium/Optimization.html#method-i-integrating_Monte_Carlo_base","(a, b, n = 100000, &block)","<p>integrating using method Monte Carlo (f - function, a, b - integrating limits, n - amount of random numbers) …\n"],["label_edge!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-label_edge-21","(from, to, label)",""],["label_edge!","Silicium::Graphs::UnorientedGraph","Silicium/Graphs/UnorientedGraph.html#method-i-label_edge-21","(from, to, label)",""],["label_vertex!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-label_vertex-21","(vertex, label)",""],["left_rect_integration","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-left_rect_integration","(left_p, right_p, eps = 0.0001, &block)","<p>Left Rectangle Method and Right Rectangle Method\n"],["left_rect_integration_n","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-left_rect_integration_n","(left_p, right_p, splits, &block)","<p>Left Rectangle Auxiliary Method and Right Rectangle Auxiliary Method\n"],["make_graph_by_plotter","Silicium::Dice::PolyhedronSet","Silicium/Dice/PolyhedronSet.html#method-i-make_graph_by_plotter","(x = percentage.size * 10, y = percentage.size * 10)","<p>creating a graph representing chances of getting points\n"],["middle","Silicium::Optimization","Silicium/Optimization.html#method-i-middle","(a, b)","<p>find centr of interval\n"],["middle_rectangles","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-middle_rectangles","(a, b, eps = 0.0001, &block)","<p>Middle Rectangles Method  with specified accuracy\n"],["middle_rectangles_with_a_segment","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-middle_rectangles_with_a_segment","(a, b, n, &block)","<p>Middle Rectangles Method with a segment\n"],["minimal_convex_hull_2d","Silicium::Geometry","Silicium/Geometry.html#method-i-minimal_convex_hull_2d","(points)","<p>Returns an array containing points that are included in the minimal convex hull for a given array of …\n"],["needed_variables_order?","Silicium::Geometry","Silicium/Geometry.html#method-i-needed_variables_order-3F","(before, after)",""],["new","Silicium::Dice::Polyhedron","Silicium/Dice/Polyhedron.html#method-c-new","(sides)","<p>initializing polyhedron&#39;s variables there are two ways how to create it 1: by number (6) - creates …\n"],["new","Silicium::Dice::PolyhedronSet","Silicium/Dice/PolyhedronSet.html#method-c-new","(arr)",""],["new","Silicium::Geometry::Line2dCanon","Silicium/Geometry/Line2dCanon.html#method-c-new","(p1, p2)",""],["new","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-c-new","(initializer = [])",""],["new","Silicium::Plotter::Image","Silicium/Plotter/Image.html#method-c-new","(width, height, bg_color = ChunkyPNG::Color::TRANSPARENT)","<p>Creates a new plot with chosen <code>width</code> and <code>height</code> parameters with background colored <code>bg_color</code>\n"],["not_polygon?","Silicium::Geometry","Silicium/Geometry.html#method-i-not_polygon-3F","(points)",""],["number_of_connected","Silicium::Graphs","Silicium/Graphs.html#method-i-number_of_connected","(graph)",""],["oriented_area","Silicium::Geometry","Silicium/Geometry.html#method-i-oriented_area","(a, b, c)",""],["percentage","Silicium::Dice::PolyhedronSet","Silicium/Dice/PolyhedronSet.html#method-i-percentage","()",""],["point_is_on_line?","Silicium::Geometry::Line2dCanon","Silicium/Geometry/Line2dCanon.html#method-i-point_is_on_line-3F","(p1)","<p>Checks the point lies on the line or not\n"],["point_to_line_distance_3d","Silicium::Geometry","Silicium/Geometry.html#method-i-point_to_line_distance_3d","(point, line_eq)","<p>Calculates the distance from a point given by a Point3d structure to a straight line given by a canonical …\n"],["process_cf","Silicium::Geometry","Silicium/Geometry.html#method-i-process_cf","(line_equation, variable)",""],["process_free_member","Silicium::Geometry","Silicium/Geometry.html#method-i-process_free_member","(line_equation, variable)",""],["process_line_by_coordinates","Silicium::Geometry","Silicium/Geometry.html#method-i-process_line_by_coordinates","(line_equation, func)",""],["protected_add_edge!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-protected_add_edge-21","(from, to)",""],["protected_delete_edge!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-protected_delete_edge-21","(from, to)",""],["put_point_in_part","Silicium::Geometry","Silicium/Geometry.html#method-i-put_point_in_part","(part, point, direction)",""],["re_lu","Silicium::Optimization","Silicium/Optimization.html#method-i-re_lu","(x)","<p>reflector function\n"],["rectangle","Silicium::Plotter::Image","Silicium/Plotter/Image.html#method-i-rectangle","(x, y, width, height, color)",""],["reverse!","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-reverse-21","()",""],["sides","Silicium::Dice::Polyhedron","Silicium/Dice/Polyhedron.html#method-i-sides","()",""],["sigmoid","Silicium::Optimization","Silicium/Optimization.html#method-i-sigmoid","(x)","<p>sigmoid function\n"],["simpson_integration","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-simpson_integration","(a, b, eps = 0.0001, &block)","<p>Simpson integration with specified accuracy\n"],["simpson_integration_with_a_segment","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-simpson_integration_with_a_segment","(a, b, n, &block)","<p>Simpson integration with a segment\n"],["sorted?","Silicium::Optimization","Silicium/Optimization.html#method-i-sorted-3F","(a)","<p>return true if array is sorted\n"],["switch_step","Silicium::Optimization","Silicium/Optimization.html#method-i-switch_step","(cur_f, prev_f, step, i)","<p>switch step if current func value &gt; previous func value\n"],["three_eights_integration","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-three_eights_integration","(a, b, eps = 0.0001, &block)","<p>Computes integral from <code>a</code> to <code>b</code> of <code>block</code> with accuracy <code>eps</code>\n"],["three_eights_integration_n","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-three_eights_integration_n","(a, b, n, &block)","<p>Computes integral from <code>a</code> to <code>b</code> of <code>block</code> with <code>n</code> segmentations\n"],["throw","Silicium::Dice::Polyhedron","Silicium/Dice/Polyhedron.html#method-i-throw","()","<p>ability to throw a polyhedron\n"],["throw","Silicium::Dice::PolyhedronSet","Silicium/Dice/PolyhedronSet.html#method-i-throw","()","<p>ability to throw a polyhedron&#39;s set using hash of chances\n"],["to_s","Silicium::Dice::Polyhedron","Silicium/Dice/Polyhedron.html#method-i-to_s","()",""],["to_s","Silicium::Dice::PolyhedronSet","Silicium/Dice/PolyhedronSet.html#method-i-to_s","()","<p>returns array of polyhedrons\n"],["trapezoid","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-trapezoid","(a, b, eps = 0.0001, &block)","<p>Trapezoid Method with specified accuracy\n"],["trapezoid_with_a_segment","Silicium::NumericalIntegration","Silicium/NumericalIntegration.html#method-c-trapezoid_with_a_segment","(a, b, n, &block)","<p>Trapezoid Method with a segment\n"],["vector_length","Silicium::Geometry","Silicium/Geometry.html#method-i-vector_length","(vector)",""],["vectors_product","Silicium::Geometry","Silicium/Geometry.html#method-i-vectors_product","(v1, v2)",""],["vertex_label_number","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-vertex_label_number","()",""],["vertex_number","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-vertex_number","()",""],["vertices","Silicium::Graphs::OrientedGraph","Silicium/Graphs/OrientedGraph.html#method-i-vertices","()",""],["README","","README_md.html","","<p><img src=\"https://badge.fury.io/rb/silicium.svg\">\n<img src=\"https://travis-ci.org/mmcs-ruby/silicium.svg?branch=master\"> ...\n"]]}}